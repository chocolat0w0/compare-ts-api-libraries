/* tslint:disable */
/* eslint-disable */
/**
 * 検証用 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Mushroom,
  MushroomsGet200Response,
  MushroomsMushroomIdGet200Response,
  MushroomsPost422Response,
} from '../models/index';
import {
    MushroomFromJSON,
    MushroomToJSON,
    MushroomsGet200ResponseFromJSON,
    MushroomsGet200ResponseToJSON,
    MushroomsMushroomIdGet200ResponseFromJSON,
    MushroomsMushroomIdGet200ResponseToJSON,
    MushroomsPost422ResponseFromJSON,
    MushroomsPost422ResponseToJSON,
} from '../models/index';

export interface MushroomsGetRequest {
    limit?: number;
    offset?: number;
}

export interface MushroomsMushroomIdGetRequest {
    mushroomId: string;
}

export interface MushroomsPostRequest {
    mushroom: Omit<Mushroom, 'id'>;
}

/**
 * 
 */
export class DefaultApi extends runtime.BaseAPI {

    /**
     * きのこ情報の一覧を取得する。
     */
    async mushroomsGetRaw(requestParameters: MushroomsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MushroomsGet200Response>> {
        const queryParameters: any = {};

        if (requestParameters['limit'] != null) {
            queryParameters['limit'] = requestParameters['limit'];
        }

        if (requestParameters['offset'] != null) {
            queryParameters['offset'] = requestParameters['offset'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mushrooms/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MushroomsGet200ResponseFromJSON(jsonValue));
    }

    /**
     * きのこ情報の一覧を取得する。
     */
    async mushroomsGet(requestParameters: MushroomsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MushroomsGet200Response> {
        const response = await this.mushroomsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * きのこの情報を取得する。
     */
    async mushroomsMushroomIdGetRaw(requestParameters: MushroomsMushroomIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MushroomsMushroomIdGet200Response>> {
        if (requestParameters['mushroomId'] == null) {
            throw new runtime.RequiredError(
                'mushroomId',
                'Required parameter "mushroomId" was null or undefined when calling mushroomsMushroomIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/mushrooms/{mushroom_id}/`.replace(`{${"mushroom_id"}}`, encodeURIComponent(String(requestParameters['mushroomId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MushroomsMushroomIdGet200ResponseFromJSON(jsonValue));
    }

    /**
     * きのこの情報を取得する。
     */
    async mushroomsMushroomIdGet(requestParameters: MushroomsMushroomIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MushroomsMushroomIdGet200Response> {
        const response = await this.mushroomsMushroomIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * きのこを登録する。
     */
    async mushroomsPostRaw(requestParameters: MushroomsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Mushroom>> {
        if (requestParameters['mushroom'] == null) {
            throw new runtime.RequiredError(
                'mushroom',
                'Required parameter "mushroom" was null or undefined when calling mushroomsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/mushrooms/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: MushroomToJSON(requestParameters['mushroom']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MushroomFromJSON(jsonValue));
    }

    /**
     * きのこを登録する。
     */
    async mushroomsPost(requestParameters: MushroomsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Mushroom> {
        const response = await this.mushroomsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
