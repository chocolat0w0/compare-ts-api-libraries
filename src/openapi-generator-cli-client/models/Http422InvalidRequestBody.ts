/* tslint:disable */
/* eslint-disable */
/**
 * 検証用 API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Http422InvalidRequestBodyCode } from './Http422InvalidRequestBodyCode';
import {
    Http422InvalidRequestBodyCodeFromJSON,
    Http422InvalidRequestBodyCodeFromJSONTyped,
    Http422InvalidRequestBodyCodeToJSON,
    Http422InvalidRequestBodyCodeToJSONTyped,
} from './Http422InvalidRequestBodyCode';

/**
 * 
 * @export
 * @interface Http422InvalidRequestBody
 */
export interface Http422InvalidRequestBody {
    /**
     * 
     * @type {Array<string>}
     * @memberof Http422InvalidRequestBody
     */
    ?: Array<string>;
    /**
     * 
     * @type {Http422InvalidRequestBodyCode}
     * @memberof Http422InvalidRequestBody
     */
    code?: Http422InvalidRequestBodyCode;
}

/**
 * Check if a given object implements the Http422InvalidRequestBody interface.
 */
export function instanceOfHttp422InvalidRequestBody(value: object): value is Http422InvalidRequestBody {
    return true;
}

export function Http422InvalidRequestBodyFromJSON(json: any): Http422InvalidRequestBody {
    return Http422InvalidRequestBodyFromJSONTyped(json, false);
}

export function Http422InvalidRequestBodyFromJSONTyped(json: any, ignoreDiscriminator: boolean): Http422InvalidRequestBody {
    if (json == null) {
        return json;
    }
    return {
        
        '': json['*'] == null ? undefined : json['*'],
        'code': json['code'] == null ? undefined : Http422InvalidRequestBodyCodeFromJSON(json['code']),
    };
}

export function Http422InvalidRequestBodyToJSON(json: any): Http422InvalidRequestBody {
    return Http422InvalidRequestBodyToJSONTyped(json, false);
}

export function Http422InvalidRequestBodyToJSONTyped(value?: Http422InvalidRequestBody | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        '*': value[''],
        'code': Http422InvalidRequestBodyCodeToJSON(value['code']),
    };
}

